#!/bin/bash

## Export variable

export EDITOR=vim

MINICOM='-c on'
export MINICOM

## Coloration pour les dépots svn et git :

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (git::\1)/'
}

parse_svn_branch() {
    parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk -F / '{print " (svn::"$1 "/" $2 ")"}'
}

parse_svn_url() {
    svn info 2>/dev/null | grep -e '^URL*' | sed -e 's#^URL: *\(.*\)#\1#g '
}

parse_svn_repository_root() {
    svn info 2>/dev/null | grep -e '^Repository Root:*' | sed -e 's#^Repository Root: *\(.*\)#\1\/#g '
}

## Fonctions

extract () {
  if [ -f "$1" ] ; then
    case "$1" in
      *.tar.bz2)   tar xvjf "$1"    ;;
      *.tar.gz)    tar xvzf "$1"    ;;
      *.tar.xz)    tar xvJf "$1"    ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar x "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xvf "$1"     ;;
      *.tbz2)      tar xvjf "$1"    ;;
      *.tgz)       tar xvzf "$1"    ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *.xz)        unxz "$1"        ;;
      *.exe)       cabextract "$1"  ;;
      *)           echo "'$1': unrecognized file compression" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function ban() {
    if [ "`id -u`" == "0" ] ; then
        iptables -A INPUT -s $1 -j DROP
    else
        sudo iptables -A INPUT -s $1 -j DROP
    fi
}

function cd () { 
  builtin cd "$@" && ls;
}

function download()
{
	old=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 1`
	while [ true ]
	do
		sleep 1
		new=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 1`
		deb=`expr $new - $old`
		deb=`expr $deb / 1000`
		echo "Download : $deb ko/s"
		old=$new
	done
}

function upload()
{
	old=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 3 | cut -d ' ' -f 1`
        while [ true ]
        do
                sleep 1
                new=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 3 | cut -d ' ' -f 1`
                deb=`expr $new - $old`
                deb=`expr $deb / 1000`
                echo "Upload : $deb ko/s"
                old=$new
        done
}

function flow()
{
	old_download=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 1`
	old_upload=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 3 | cut -d ' ' -f 1`
	while [ true ]
	do
		sleep 1
		new_download=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 2 | cut -d ' ' -f 1`
		new_upload=`ifconfig  | grep Octets | head -n 1 | cut -d ':' -f 3 | cut -d ' ' -f 1`
		download=`expr $new_download - $old_download`
		upload=`expr $new_upload - $old_upload`
		download=`expr $download / 1000`
		upload=`expr $upload / 1000`
		echo "Download : $download ko/s Upload : $upload ko/s"
		old_download=$new_download
		old_upload=$new_upload
	done
}

function serialListen()
{
	mkdir -p ${HOME}/import
	if [ -z $1 ]
	then
		echo "$0 [filename] [serialPort]"
		echo "Filename is missing"
		return 1
	fi
	if [ -z $2 ]
	then
		echo "$0 [filename] [serialPort]"
		echo "Serial port is missing"
		return 1
	fi
	(stty raw; cat > "${1}") < "$2"
}

function gitPgpStop()
{
	git config --local commit.gpgsign false
}

# Transfer file using transfer.io
transfer()
{
	tmpFile=$(mktemp -t transferXXX)
	curl --progress-bar --upload-file $1 https://transfer.sh/$(basename $1) >> $tmpFile;
	cat $tmpFile
	echo ""
	rm -f $tmpFile
}

transferGpg()
{
	tmpFile=$(mktemp -t transferXXX)
	tmpContent=$(mktemp -t transferGpgXXX)
	cat $1 | gpg -ac -o- > $tmpContent
	curl --progress-bar --upload-file $tmpContent https://transfer.sh/$(basename $1) >> $tmpFile;
	cat $tmpFile
	echo ""
        rm -f $tmpContent $tmpFile
}

downloadGpg()
{
	filename="$(echo "$1" | cut -d '/' -f 5)"
	echo $filename
	curl $1 | gpg -o- > $filename
}

function nrf52_gdb_server()
{
	device=nRF52832_xxAA
	port=2331

	JLinkGDBServer \
		-device $device \
		-port $port \
		-strict \
		-if swd \
		-localhostonly \
		-halt \
		-vd
}

function convertVideoToGif()
{
	FPS=15
	WIDTH=1920

	if [ $# -ne 2 ]
	then
		echo "Usage $0 [path to video] [gif name]"
		return
	else
		echo "Convert ${1} to in ${2}.gif"
	fi

	if [ ! -e ${1} ]
	then
		echo "Source file ${1} doesn't exist"
		return
	fi

	if [ -e ${2} ]
	then
		echo "Output file ${2}.gif already exists"
		return
	fi

	ffmpeg -i ${1} -vf fps=$FPS,scale=$WIDTH:-1:flags=lanczos,palettegen tmp_palette.png
	ffmpeg -i ${1} -i tmp_palette.png -loop 0 -filter_complex "fps=$FPS,scale=$WIDTH:-1:flags=lanczos[x];[x][1:v]paletteuse" ${2}.gif
	rm tmp_palette.png
}

function generateHeader()
{
    if [ $# -ne 1 ]
    then
        echo "Usage ${0} [path to file]"
        return
    fi

    if [ -d "${1}" ]
    then
        echo "${1} already exist and it's a folder :'("
        return
    fi

    if [ -a "${1}" ]
    then
        echo "File ${1} already exist"
        return
    fi

    DIRNAME="$(dirname ${1})"
    if [ ! -d "${DIRNAME}" ]
    then
        mkdir -p ${DIRNAME}
    fi

    touch "${1}"

    NAME="Jérémy Cheynet"
    EMAIL="jeremy.cheynet@actronika.com"
    BASENAME="$(basename ${1})"
    HEADER_NAME="$(echo ${BASENAME} | cut -d '.' -f 1 | tr a-z A-Z)_H"
    COMPANY="Actronika SAS"
    COPYRIGHT="Copyright (C) $(date +"%Y") ${COMPANY}"

    case "${1}" in
            *.cpp|*.c)
                echo "/*
 * Author: ........ ${NAME} <${EMAIL}>
 * File: .......... ${BASENAME}
 * ${COPYRIGHT}
 */
#include \"${BASENAME%.*}.h\"
" > ${1}
                ;;
            *.hpp|*.h)
                echo "/*
 * Author: ........ ${NAME} <${EMAIL}>
 * File: .......... ${BASENAME}
 * ${COPYRIGHT}
 */
#ifndef ${HEADER_NAME}
#define ${HEADER_NAME}

#endif // ${HEADER_NAME}" > ${1}
                ;;
            *.py)
                echo "#!/usr/bin/env python3
'''
File name: ${BASENAME}
Author: ${NAME} <${EMAIL}>
Copyright: ${COPYRIGHT}
'''" > ${1}
                chmod +x ${1}
                ;;
            *.sh)
                echo "#!/bin/bash
# Title: ${BASENAME}
# Author: ${NAME} <${EMAIL}>
# Copyright: ${COPYRIGHT}
# ============================================================================ #" > ${1}
                chmod +x ${1}
                ;;
            *)
                echo "'$1': unrecognized file type"
                ;;
    esac

}

function get_resolution()
{
	if [ $# -ne 1 ]
	then
		echo "Usage $0 [Path to vidéo]"
	fi
	ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$1"
}

function clean_arp_table()
{
	start=100
	stop=200

	if [ $# -ge 1 ]
	then
		start=$1
    	fi

	if [ $# -ge 2 ]
	then
		stop=$2
	fi

	for ip in `arp -n | cut -d ' ' -f 1`
	do
		last_ip=`echo ${ip} | cut -d '.' -f 4`
		if [ -z ${last_ip} ]
		then
			if [ ${last_ip} -ge ${start} ]
			then
				if [ ${last_ip} -le ${stop} ]
				then
					sudo arp -d ${ip}
				fi
			fi
		fi
	done
}

function search_mac()
{
	start=100
	stop=200
	found=0
	name=""
	if [ $# -ge 1 ]
	then
		format="$1"
	else
		echo "Usage $0 [MAC templace] [start IP address] [stop IP address] [name]"
		return 1
    	fi

	if [ $# -ge 2 ]
	then
		start=$2
	fi
	if [ $# -ge 3 ]
	then
		stop=$3
	fi
	if [ $# -ge 4 ]
	then
		name=$4
	fi

	clean_arp_table ${start} ${stop}

	for ip in $(seq ${start} ${stop})
	do
		ping -c 2 -w 1 ${ip} >> /dev/null
		if [ $(arp -a | grep "192.168.0.${ip}" | grep -c "${format}") == "1" ]
		then
			echo "Check IP 192.168.0.${ip} : Is a ${name^^} !!! Oh yeah !!!"
			found=`expr ${found} + 1`
		else
			echo "Check IP 192.168.0.${ip} : not a ${name} :'("
		fi
	done

	if [ ${found} -eq 0 ]
	then
		echo "Game over"
	else
		echo "We found ${found} ${name}(s)"
	fi
}

function search_raspi()
{
	start=100
	stop=200

	if [ $# -ge 1 ]
	then
		start=$1
	fi

	if [ $# -ge 2 ]
	then
		stop=$2
	fi

	search_mac "b8:27" ${start} ${stop} "raspi"
}

#export PATH=$PATH:/opt/jdk-10.0.1/bin

PS1='\[\033[01;32m\]\u\[\033[01;34m\]@\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[31m\]$(parse_git_branch)\[\033[00m\]\$ '
unset color_prompt force_color_prompt

#. /home/jeremy/.admin/.bin/git/emoji-cli/emoji-cli.zsh
